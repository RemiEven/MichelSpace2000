package rng

import (
	"fmt"
	"math/rand"
	"time"

	"github.com/ojrac/opensimplex-go"
)

func init() {
	rand.Seed(time.Now().Unix())
}

// RNG can be used to generate random values
type RNG struct {
	seed        string
	source      *rand.Rand
	noiseSource opensimplex.Noise32
}

// NewRNG creates a new RNG based on either a given seed or a randomly generated one
func NewRNG(seed string) (*RNG, error) {
	seedValue := int64(0)
	if seed == "" {
		seedValue = rand.Int63()
		seed = int64ToSeed(seedValue)
	} else {
		var err error
		seedValue, err = seedToInt64(seed)
		if err != nil {
			return nil, fmt.Errorf("invalid seed: %w", err)
		}
	}
	return &RNG{
		seed:        seed,
		source:      rand.New(rand.NewSource(seedValue)),
		noiseSource: opensimplex.NewNormalized32(seedValue),
	}, nil
}

// Seed returns the RNG seed
func (rng *RNG) Seed() string {
	return rng.seed
}

// GetValueAtPosition returns a random value for the position as generated by an opensimplex noise source
func (rng *RNG) GetValueAtPosition(x, y float32) float32 {
	return rng.noiseSource.Eval2(x, y)
}
